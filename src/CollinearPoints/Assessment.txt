See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

SpotBugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  29/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 82.44%
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 60%, Timing: 10%, Memory: 20% ]


ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.6K May  1 13:53 BruteCollinearPoints.java
3.2K May  1 13:53 FastCollinearPoints.java
5.2K May  1 13:53 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac LineSegment.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(18000, 13000) -> (18000, 23000) -> (18000, 26000) -> (18000, 27000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(9937, 10022) -> (11001, 10022) -> (14560, 10022) -> (20182, 10022)'


    - failed on trial 1 of 500
     4
      9937 10022
     11001 10022
     14560 10022
     20182 10022

  *  5 random horizontal line segments
    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 1 missing entry in student solution:
      '(1559, 14737) -> (9977, 14737) -> (12177, 14737) -> (17262, 14737)'


    - failed on trial 1 of 250
     20
     17262 14737
     10569  6038
     11496 14038
     12177 14737
      1559 14737
     13156 13854
      7178 13854
     15900 14038
     10573  6038
      5300 14038
     19199  6038
     20597  8623
     11749 13854
      4868 13854
     16130  6038
      7499  8623
      6742 14038
     13229  8623
      9977 14737
      5776  8623

  * 10 random horizontal line segments
    - number of entries in student   solution: 9
    - number of entries in reference solution: 10
    - 1 missing entry in student solution:
      '(1389, 20230) -> (1937, 20230) -> (6736, 20230) -> (18922, 20230)'


    - failed on trial 14 of 50

  * 15 random horizontal line segments
==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including:
      '(19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)'


  * filename = vertical50.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including:
      '(5991, 15606) -> (5991, 20227) -> (5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 75
    - 75 missing entries in student solution, including:
      '(13780, 16365) -> (13780, 17494) -> (13780, 18253) -> (13780, 18908)'


  * filename = vertical100.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including:
      '(15135, 15588) -> (15135, 17398) -> (15135, 19476) -> (15135, 20439)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(10446, 3852) -> (10446, 11153) -> (10446, 16223) -> (10446, 17596)'


    - failed on trial 1 of 500
     4
     10446 17596
     10446 16223
     10446  3852
     10446 11153

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including:
      '(17572, 10003) -> (17572, 18950) -> (17572, 19341) -> (17572, 20370)'


    - failed on trial 1 of 250
     20
      3460  1996
     20299  2361
     20299  7027
     17572 10003
      3460  4981
     18225 13766
     18225 11966
     20299  7069
     16023  6581
     20299 12021
     17572 20370
      3460 16978
     16023 17884
     17572 19341
      3460  4792
     16023  6584
     18225 16224
     17572 18950
     18225  5141
     16023  3802

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including:
      '(1731, 10563) -> (1731, 10638) -> (1731, 12391) -> (1731, 14323)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including:
      '(4608, 14038) -> (4608, 15279) -> (4608, 16009) -> (4608, 20966)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
    - number of entries in student   solution: 24
    - number of entries in reference solution: 31
    - 7 missing entries in student solution, including:
      '(29000, 14000) -> (29000, 18000) -> (29000, 24000) -> (29000, 31000)'


  * filename = input300.txt
    - number of entries in student   solution: 5
    - number of entries in reference solution: 6
    - 1 missing entry in student solution:
      '(2950, 200) -> (2950, 4050) -> (2950, 5600) -> (2950, 25400)'


  * filename = inarow.txt
==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - number of entries in student   solution: 284
    - number of entries in reference solution: 288
    - 4 missing entries in student solution, including:
      '(16743, 17095) -> (16743, 17271) -> (16743, 17447) -> (16743, 17623)'


  * filename = rs1423.txt
    - number of entries in student   solution: 442
    - number of entries in reference solution: 443
    - 1 missing entry in student solution:
      '(15294, 17325) -> (15294, 17358) -> (15294, 17391) -> (15294, 17424)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(18000, 13000) -> (18000, 23000) -> (18000, 26000) -> (18000, 27000)'


  * filename = input299.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(7300, 10050) -> (7300, 10450) -> (7300, 25700) -> (7300, 31650)'


==> FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
    - number of entries in student   solution: 3
    - number of entries in reference solution: 4
    - 1 missing entry in student solution:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - number of entries in student   solution: 4
    - number of entries in reference solution: 6
    - 2 missing entries in student solution, including:
      '(18000, 13000) -> (18000, 23000) -> (18000, 26000) -> (18000, 27000)'



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(8786, 5719) -> (12701, 7324) -> (15833, 8608) -> (22097, 11176)'


    - failed on trial 1 of 500
     4
     22097 11176
     12701  7324
      8786  5719
     15833  8608

  *  5 random line segments
    - number of entries in student   solution: 3
    - number of entries in reference solution: 5
    - 2 missing entries in student solution, including:
      '(10407, 7552) -> (10647, 10237) -> (10743, 11311) -> (10791, 11848)'


    - failed on trial 1 of 500
     20
     10791 11848
      3525  7477
     11278   663
     14548  8723
      4367  7444
     10407  7552
      9717  9721
     14221  7917
     13567  6305
     10647 10237
     11085 12207
      5579  7496
      5589  8225
       125  7262
      4973  7470
     10743 11311
     10233  9908
      9045 11519
      5475 10315
      3435  9627

  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(13244, 2666) -> (13248, 5794) -> (13256, 12050) -> (13257, 12832)'


    - failed on trial 2 of 100

  * 50 random line segments
    - number of entries in student   solution: 48
    - number of entries in reference solution: 50
    - 2 missing entries in student solution, including:
      '(8923, 2433) -> (8948, 5108) -> (8968, 7248) -> (9003, 10993)'


    - failed on trial 2 of 15

  * 100 random line segments
==> FAILED

Test 10: random line segments
  *  1 random line segment
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(8894, 3589) -> (9710, 4453) -> (9761, 4507) -> (12668, 7585)'


    - failed on trial 1 of 500
     4
     12668  7585
      9761  4507
      8894  3589
      9710  4453

  *  5 random line segments
    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 1 missing entry in student solution:
      '(6291, 5440) -> (6291, 6182) -> (6291, 8090) -> (6291, 9097)'


    - failed on trial 1 of 500
     20
      7299 11461
     11473 12658
      6291  9097
      6291  6182
      4509   575
      5677  8932
      7819 11961
      7189  3135
      6291  5440
     11355 15361
      4007  6805
      3667  6440
     11893 12928
     10055 14111
      6931  9944
      9802  5631
      6291  8090
      5027  7900
      5581  1599
      9457 11362

  * 25 random line segments
    - number of entries in student   solution: 24
    - number of entries in reference solution: 25
    - 1 missing entry in student solution:
      '(10077, 1503) -> (10077, 4506) -> (10077, 4779) -> (10077, 7782)'


    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 44
    - number of entries in reference solution: 50
    - 6 missing entries in student solution, including:
      '(11093, 9271) -> (11093, 10576) -> (11093, 10924) -> (11093, 11968)'


    - failed on trial 1 of 15

  * 100 random line segments
    - number of entries in student   solution: 92
    - number of entries in reference solution: 100
    - 8 missing entries in student solution, including:
      '(6009, 12875) -> (6009, 13155) -> (6009, 14555) -> (6009, 14611)'


    - failed on trial 1 of 2

==> FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(1, 9) -> (6, 9) -> (7, 9) -> (9, 9)'


    - failed on trial 2 of 500
     5
         9     9
         6     9
         6     0
         1     9
         7     9

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution:
      '(3, 0) -> (3, 1) -> (3, 5) -> (3, 6)'


    - failed on trial 62 of 500
     10
         9     8
         2     5
         4     1
         0     4
         3     0
         4     9
         3     5
         1     5
         3     1
         3     6

  * 50 random points in a 10-by-10 grid
    - number of entries in student   solution: 37
    - number of entries in reference solution: 39
    - 2 missing entries in student solution, including:
      '(1, 2) -> (1, 3) -> (1, 5) -> (1, 7)'


    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
  * 200 random points in a 50-by-50 grid
    - number of entries in student   solution: 193
    - number of entries in reference solution: 205
    - 12 missing entries in student solution, including:
      '(47, 32) -> (47, 42) -> (47, 45) -> (47, 46)'


    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 6
    - number of entries in reference solution: 10
    - 4 missing entries in student solution, including:
      '(3, 0) -> (3, 1) -> (3, 2) -> (3, 3)'


  * 5-by-5 grid
  * 10-by-10 grid
  * 20-by-20 grid
  * 5-by-4 grid
    - number of entries in student   solution: 8
    - number of entries in reference solution: 13
    - 5 missing entries in student solution, including:
      '(4, 0) -> (4, 1) -> (4, 2) -> (4, 3)'


  * 6-by-4 grid
    - number of entries in student   solution: 10
    - number of entries in reference solution: 16
    - 6 missing entries in student solution, including:
      '(5, 0) -> (5, 1) -> (5, 2) -> (5, 3)'


  * 10-by-4 grid
    - number of entries in student   solution: 28
    - number of entries in reference solution: 38
    - 10 missing entries in student solution, including:
      '(9, 0) -> (9, 1) -> (9, 2) -> (9, 3)'


  * 15-by-4 grid
    - number of entries in student   solution: 64
    - number of entries in reference solution: 79
    - 15 missing entries in student solution, including:
      '(14, 0) -> (14, 1) -> (14, 2) -> (14, 3)'


  * 25-by-4 grid
    - number of entries in student   solution: 188
    - number of entries in reference solution: 213
    - 25 missing entries in student solution, including:
      '(24, 0) -> (24, 1) -> (24, 2) -> (24, 3)'


==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 9/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                   63
=> passed    32   0.00      107880           0         107880                  156
=> passed    64   0.01     1906128           0        1906128                  372
=> passed   128   0.04    32004000           0       32004000                  871
=> passed   256   0.65   524377920           0      524377920                 1986
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        5460           0           5460                   60
=> passed    32   0.01      107880           0         107880                  153
=> passed    64   0.03     1906128           0        1906128                  377
=> passed   128   0.12    32004000           0       32004000                  864
=> passed   256   1.63   524377920           0      524377920                 1988
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01           0       22578          45156                  375
=> passed   128   0.01           0      105598         211196                  866
=> passed   256   0.02           0      480571         961142                 1982
=> passed   512   0.12           0     2158459        4316918                 4461
=> passed  1024   0.38           0     9595774       19191548                10011
=> passed  2048   0.91           0    42285600       84571200                22015
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (84571200 / 19191548) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00           0        8732          17464                  433
=> passed   128   0.00           0       33924          67848                  995
=> passed   256   0.00           0      133741         267482                 2237
=> passed   512   0.00           0      530519        1061038                 4970
=> passed  1024   0.02           0     2111554        4223108                11030
=> passed  2048   0.04           0     8421422       16842844                24090
=> passed  4096   0.16           0    33628187       67256374                52227
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (67256374 / 16842844) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00           0       18874          37748                  714
=> passed   128   0.00           0       59982         119964                 2232
=> passed   256   0.00           0      214642         429284                 7451
=> passed   512   0.01           0      809276        1618552                26327
=> passed  1024   0.03           0     3134024        6268048                97417
=> passed  2048   0.10           0    12312653       24625306               371564
=> passed  4096   0.38           0    48759977       97519954              1446242
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (97519954 / 24625306) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00           0       22013          44026                  764
=> passed   128   0.00           0       91991         183982                 2278
=> passed   256   0.00           0      297253         594506                 7376
=> passed   512   0.01           0     1115665        2231330                25499
=> passed  1024   0.04           0     4307519        8615038                92937
=> passed  2048   0.15           0    16889426       33778852               351748
=> passed  4096   0.57           0    66812268      133624536              1362948
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (133624536 / 33778852) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================



